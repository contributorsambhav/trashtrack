{"ast":null,"code":"var _jsxFileName = \"/home/sambhav/TBT/Innovisionaries/Innovisionaries/trashtrack/Frontend/src/components/Nearest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NearestMunicipalityFinder = () => {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  const [nearestMunicipality, setNearestMunicipality] = useState('');\n  const [minDistance, setMinDistance] = useState(null);\n  useEffect(() => {\n    const getUserLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          reverseGeocode(latitude, longitude);\n        }, error => {\n          console.error('Error getting user location:', error);\n          handleLocationError(error);\n        });\n      } else {\n        console.error('Geolocation is not supported by this browser.');\n        handleGeolocationNotSupported();\n      }\n    };\n    const reverseGeocode = (latitude, longitude) => {\n      // Perform reverse geocoding to retrieve human-readable location information\n      // Example: Use a third-party geocoding service like Google Maps Geocoding API\n      // Make an HTTP request to the geocoding API endpoint with the latitude and longitude\n      // Parse the response to extract location details\n      // Display the location information to the user or use it in your application\n    };\n    const handleLocationError = error => {\n      // Handle the error gracefully, display a user-friendly message, and provide alternative options\n    };\n    const handleGeolocationNotSupported = () => {\n      // Notify the user that geolocation is not supported by their browser\n    };\n    getUserLocation();\n  }, []);\n  useEffect(() => {\n    const calculateDistance = (coord1, coord2) => {\n      const R = 6371; // Radius of the Earth in kilometers\n      const lat1 = coord1.latitude;\n      const lon1 = coord1.longitude;\n      const lat2 = coord2.latitude;\n      const lon2 = coord2.longitude;\n      const dLat = (lat2 - lat1) * Math.PI / 180;\n      const dLon = (lon2 - lon1) * Math.PI / 180;\n      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      const distance = R * c;\n      return distance; // Distance in kilometers\n    };\n    const municipalities = [{\n      name: 'Municipal council Bilaspur',\n      latitude: 31.33918975292773,\n      longitude: 76.75704773589915\n    }\n    // Other municipality data here...\n    ];\n    if (userLocation) {\n      let minDistance = Number.MAX_SAFE_INTEGER;\n      let nearestMunicipality = '';\n      municipalities.forEach(municipality => {\n        const distance = calculateDistance(userLocation, {\n          latitude: municipality.latitude,\n          longitude: municipality.longitude\n        });\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestMunicipality = municipality.name;\n        }\n      });\n      setNearestMunicipality(nearestMunicipality);\n      setMinDistance(minDistance);\n    }\n  }, [userLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Nearest Municipality Finder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), userLocation && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your current location: \", userLocation.latitude, \", \", userLocation.longitude]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), nearestMunicipality && minDistance && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The nearest municipality is \", nearestMunicipality, \" at a distance of \", minDistance.toFixed(2), \" kilometers.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(NearestMunicipalityFinder, \"s8OypQOAjobWfYJ2Jjv9U328oSw=\");\n_c = NearestMunicipalityFinder;\nexport default NearestMunicipalityFinder;\nvar _c;\n$RefreshReg$(_c, \"NearestMunicipalityFinder\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NearestMunicipalityFinder","_s","userLocation","setUserLocation","nearestMunicipality","setNearestMunicipality","minDistance","setMinDistance","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","reverseGeocode","error","console","handleLocationError","handleGeolocationNotSupported","calculateDistance","coord1","coord2","R","lat1","lon1","lat2","lon2","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","distance","municipalities","name","Number","MAX_SAFE_INTEGER","forEach","municipality","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["/home/sambhav/TBT/Innovisionaries/Innovisionaries/trashtrack/Frontend/src/components/Nearest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst NearestMunicipalityFinder = () => {\n  const [userLocation, setUserLocation] = useState(null);\n  const [nearestMunicipality, setNearestMunicipality] = useState('');\n  const [minDistance, setMinDistance] = useState(null);\n\n  useEffect(() => {\n    const getUserLocation = () => {\n      if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(\n              (position) => {\n                  const { latitude, longitude } = position.coords;\n                  reverseGeocode(latitude, longitude);\n              },\n              (error) => {\n                  console.error('Error getting user location:', error);\n                  handleLocationError(error);\n              }\n          );\n      } else {\n          console.error('Geolocation is not supported by this browser.');\n          handleGeolocationNotSupported();\n      }\n  };\n\n  const reverseGeocode = (latitude, longitude) => {\n      // Perform reverse geocoding to retrieve human-readable location information\n      // Example: Use a third-party geocoding service like Google Maps Geocoding API\n      // Make an HTTP request to the geocoding API endpoint with the latitude and longitude\n      // Parse the response to extract location details\n      // Display the location information to the user or use it in your application\n  };\n\n  const handleLocationError = (error) => {\n      // Handle the error gracefully, display a user-friendly message, and provide alternative options\n  };\n\n  const handleGeolocationNotSupported = () => {\n      // Notify the user that geolocation is not supported by their browser\n  };\n\n  getUserLocation();\n  }, []);\n\n  useEffect(() => {\n    const calculateDistance = (coord1, coord2) => {\n      const R = 6371; // Radius of the Earth in kilometers\n      const lat1 = coord1.latitude;\n      const lon1 = coord1.longitude;\n      const lat2 = coord2.latitude;\n      const lon2 = coord2.longitude;\n\n      const dLat = (lat2 - lat1) * Math.PI / 180;\n      const dLon = (lon2 - lon1) * Math.PI / 180;\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      const distance = R * c;\n\n      return distance; // Distance in kilometers\n    };\n\n    const municipalities = [\n      { name: 'Municipal council Bilaspur', latitude: 31.33918975292773, longitude: 76.75704773589915 },\n      // Other municipality data here...\n    ];\n\n    if (userLocation) {\n      let minDistance = Number.MAX_SAFE_INTEGER;\n      let nearestMunicipality = '';\n\n      municipalities.forEach(municipality => {\n        const distance = calculateDistance(userLocation, {\n          latitude: municipality.latitude,\n          longitude: municipality.longitude\n        });\n        if (distance < minDistance) {\n          minDistance = distance;\n          nearestMunicipality = municipality.name;\n        }\n      });\n\n      setNearestMunicipality(nearestMunicipality);\n      setMinDistance(minDistance);\n    }\n  }, [userLocation]);\n\n  return (\n    <div>\n      <h2>Nearest Municipality Finder</h2>\n      {userLocation && (\n        <p>Your current location: {userLocation.latitude}, {userLocation.longitude}</p>\n      )}\n      {nearestMunicipality && minDistance && (\n        <p>The nearest municipality is {nearestMunicipality} at a distance of {minDistance.toFixed(2)} kilometers.</p>\n      )}\n    </div>\n  );\n};\n\nexport default NearestMunicipalityFinder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}