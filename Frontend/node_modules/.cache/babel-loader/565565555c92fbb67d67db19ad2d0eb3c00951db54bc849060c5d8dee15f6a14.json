{"ast":null,"code":"// Assuming you have an async function for handling the login process\nasync function handleLogin(email, password) {\n  try {\n    const response = await fetch('/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      const user = data.user;\n      console.log(`${user.name} logged in successfully.`);\n      // Set bool to true indicating successful login\n      bool = true;\n    } else {\n      // Set bool to false indicating failed login\n      bool = false;\n      const errorData = await response.json();\n      console.log('Login failed:', errorData.error);\n    }\n  } catch (error) {\n    console.error('Error during login:', error);\n    // Set bool to false on error\n    bool = false;\n  }\n}\n\n// Example usage of the handleLogin function\nconst email = 'user@example.com';\nconst password = 'password';\nhandleLogin(email, password);","map":{"version":3,"names":["handleLogin","email","password","response","fetch","method","headers","body","JSON","stringify","ok","data","json","user","console","log","name","bool","errorData","error"],"sources":["/home/sambhav/TBT/Innovisionaries/Innovisionaries/trashtrack/Frontend/src/App.js"],"sourcesContent":["// Assuming you have an async function for handling the login process\nasync function handleLogin(email, password) {\n  try {\n      const response = await fetch('/login', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ email, password })\n      });\n\n      if (response.ok) {\n          const data = await response.json();\n          const user = data.user;\n          console.log(`${user.name} logged in successfully.`);\n          // Set bool to true indicating successful login\n          bool = true;\n      } else {\n          // Set bool to false indicating failed login\n          bool = false;\n          const errorData = await response.json();\n          console.log('Login failed:', errorData.error);\n      }\n  } catch (error) {\n      console.error('Error during login:', error);\n      // Set bool to false on error\n      bool = false;\n  }\n}\n\n// Example usage of the handleLogin function\nconst email = 'user@example.com';\nconst password = 'password';\n\nhandleLogin(email, password);\n"],"mappings":"AAAA;AACA,eAAeA,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC1C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,QAAQ,EAAE;MACnCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC5C,CAAC,CAAC;IAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;MACb,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,MAAMC,IAAI,GAAGF,IAAI,CAACE,IAAI;MACtBC,OAAO,CAACC,GAAG,CAAE,GAAEF,IAAI,CAACG,IAAK,0BAAyB,CAAC;MACnD;MACAC,IAAI,GAAG,IAAI;IACf,CAAC,MAAM;MACH;MACAA,IAAI,GAAG,KAAK;MACZ,MAAMC,SAAS,GAAG,MAAMf,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvCE,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,SAAS,CAACC,KAAK,CAAC;IACjD;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACZL,OAAO,CAACK,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C;IACAF,IAAI,GAAG,KAAK;EAChB;AACF;;AAEA;AACA,MAAMhB,KAAK,GAAG,kBAAkB;AAChC,MAAMC,QAAQ,GAAG,UAAU;AAE3BF,WAAW,CAACC,KAAK,EAAEC,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}